AWSTemplateFormationVersion: 2010-09-09

Discription:
This Cloudformation Template creates an infrastructure for Docker Swarm
  with five EC2 Instances with Amazon Linux 2. Instances are configured
  with custom security group allowing SSH (22), HTTP (80) UDP (4789, 7946), 
  and TCP(2377, 7946, 8080) connections from anywhere.
  User needs to select appropriate key name when launching the template.

Resources:
  RoleEnablingEC2forECR:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess

  EC2Profile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Roles: #required
          - !Ref RoleEnablingEC2forECR

  DockerMachinesSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH and HTTP for Docker Machines
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 2377
            ToPort: 2377
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 7946
            ToPort: 7946
            CidrIp: 0.0.0.0/0
          - IpProtocol: udp
            FromPort: 7946
            ToPort: 7946
            CidrIp: 0.0.0.0/0
          - IpProtocol: udp
            FromPort: 4789
            ToPort: 4789
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0

            
  DockerMachineLT:
      Type: "AWS::EC2::LaunchTemplate"
      Properties:
        LaunchTemplateData:
          ImageId: ami-0947d2ba12ee1ff75
          InstanceType: t2.micro
          KeyName: !Ref KeyPairName
          IamInstanceProfile: 
            Arn: !GetAtt EC2Profile.Arn
          SecurityGroupIds:
            - !GetAtt DockerMachinesSecurityGroup.GroupId
          TagSpecifications: 
            - ResourceType: instance
              Tags: 
                - Key: app-stack-name
                  Value: !Sub ${AWS::StackName}
                - Key: environment
                  Value: dev
  
  DockerInstance1:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DockerMachineLT
        Version: !GetAtt DockerMachineLT.LatestVersionNumber
      Tags:                
        - Key: server
          Value: docker-instance-1                       
        - Key: swarm-role
          Value: grand-master                       
        - Key: Name
          Value: !Sub ${AWS::StackName} Docker Machine 1st
  DockerInstance2:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DockerMachineLT
        Version: !GetAtt DockerMachineLT.LatestVersionNumber
      Tags:                
        - Key: server
          Value: docker-instance-2                       
        - Key: swarm-role
          Value: manager                       
        - Key: Name
          Value: !Sub ${AWS::StackName} Docker Machine 2nd
  DockerInstance3:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DockerMachineLT
        Version: !GetAtt DockerMachineLT.LatestVersionNumber
      Tags:                
        - Key: server
          Value: docker-instance-3                       
        - Key: swarm-role
          Value: manager                       
        - Key: Name
          Value: !Sub ${AWS::StackName} Docker Machine 3rd
  DockerInstance4:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DockerMachineLT
        Version: !GetAtt DockerMachineLT.LatestVersionNumber
      Tags:                
        - Key: server
          Value: docker-instance-4                       
        - Key: swarm-role
          Value: worker                       
        - Key: Name
          Value: !Sub ${AWS::StackName} Docker Machine 4th
  DockerInstance5:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DockerMachineLT
        Version: !GetAtt DockerMachineLT.LatestVersionNumber
      Tags:                
        - Key: server
          Value: docker-instance-5                       
        - Key: swarm-role
          Value: worker                       
        - Key: Name
          Value: !Sub ${AWS::StackName} Docker Machine 5th
             
Outputs: